# Generated by Django 3.2.2 on 2021-05-21 08:48
from random import randint

from django.db import migrations
from faker import Faker
from app.models import *


def fill_tag(apps, schema_editor):
    tag = apps.get_model("app", "Tag")
    for i in range(1, 1):
        print(i)
        # one_tag = tag(text=Faker().word())
        # one_tag.save()


def fill_user(apps, schema_editor):
    user = apps.get_model("auth", "User")
    for i in range(1, 2):
        print(i)
        one_user = user(username=Faker().simple_profile()['username'],
                        email=Faker().email(),
                        password=Faker().name())
        one_user.save()


# def fill_question(apps, schema_editor):
#     question = apps.get_model("app", "Question")
#     user = apps.get_model("auth", "User")
#     for i in range(1, 2):
#         print(i)
#         author = user.objects.get(id=randint(user.objects.first().id, user.objects.last().id))
#         tags = [Tag.objects.get(pk=randint(Tag.objects.first().id, Tag.objects.last().id))]
#         one_question = question(
#             author=author,
#             title=Faker().paragraph(nb_sentences=1),
#             text=Faker().text,
#             date=Faker().date,
#             rating=randint(-100, 100),
#         )
#         one_question.save()
#         one_question.tag.set(tags)


def fill_answer(apps, schema_editor):
    answer = apps.get_model("app", "Answer")
    question = apps.get_model("app", "Question")
    user = apps.get_model("auth", "User")
    for i in range(1, 2):
        print(i)
        one_answer = answer(body=Faker().text,
                            author=user.objects.get(pk=randint(user.objects.first().id, user.objects.last().id)),
                            date=Faker().date,
                            question=question.objects.get(
                                pk=randint(question.objects.first().id, question.objects.last().id)),
                            rating=randint(-100, 100),
                            )
        one_answer.save()


def fill_like(apps, schema_editor):
    like = apps.get_model("app", "Like")
    answer = apps.get_model("app", "Answer")
    user = apps.get_model("auth", "User")
    content_type = apps.get_model("contenttypes", "ContentType")
    for i in range(1, 2):
        print(i)
        obj = answer.objects.get(pk=randint(answer.objects.first().id, answer.objects.last().id))
        one_like = like(user=user.objects.get(pk=randint(user.objects.first().id, user.objects.last().id)),
                        contentType=content_type.objects.get_for_model(obj),
                        vote=1,
                        object_id=obj.id,
                        )
        one_like.save()

    for i in range(1, 2):
        print(i)
        obj = Question.objects.get(pk=randint(Question.objects.first().id, Question.objects.last().id))
        one_like = like(user=user.objects.get(pk=randint(user.objects.first().id, user.objects.last().id)),
                        contentType=ContentType.objects.get_for_model(obj),
                        vote=1,
                        object_id=obj.id,
                        )
        one_like.save()


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0008_auto_20210521_1012'),
    ]

    operations = [
        migrations.RunPython(fill_tag),
        migrations.RunPython(fill_user),
        # migrations.RunPython(fill_question),
        migrations.RunPython(fill_answer),
        # migrations.RunPython(fill_like),
    ]

